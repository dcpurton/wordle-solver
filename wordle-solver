#! /usr/bin/python3

# wordle-solver
# Solve a Wordle puzzle
# Copyright (c) 2022  David Purton
# 
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


from datetime import date
from os import getenv
from pathlib import Path

import argparse
import json
import operator
import pathlib
import platform
import random
import re
import signal
import sys
import urllib.request


#
# has_ansi(): determine if output supports ANSI escape sequences
#
# returns:
#   True:  if output supports ANSI escape sequences
#   False: if output does not support ANSI escape sequences
def has_ansi():
   return hasattr(sys.stdout, "isatty") and sys.stdout.isatty() and platform.system() != "Windows"
#
# end has_ansi()
#


#
# user_data_dir(): get the user data directory
#  file_name: file to be fetched from the data dir
#
#  returns:
#    file_name_full_path: full path to file_name
#
def user_data_dir(file_name):
    home = pathlib.Path.home()
    if sys.platform == "win32":
        data_dir = home / "AppData/Roaming"
    elif sys.platform == "linux":
        os_path = getenv("XDG_DATA_HOME", "~/.local/share")
        data_dir = Path(os_path).expanduser()
    elif sys.platform == "darwin":
        data_dir = home / "Library/Application Support"
    return data_dir / "wordle-solver" / file_name
#
# end user_data_dir()
#


#
# init_stats(): initialise statistics dictionary
#
# returns:
#   stats: empty statistics dictionary
def init_stats():
    stats = {
            "Played": 0,
            "Win %": 0,
            "Current Streak": 0,
            "Max Streak": 0,
            "Guess Distribution": [0, 0, 0, 0, 0, 0],
            "Won": 0
            }
    return stats
#
# end init_stats()
#


#
# load_stats(): load statistics from statistics.json in user data directory
#   if statistics.json does not exist, it is created and statistics are initialised
#
#   returns:
#     stats: dictionary containing statistics
#
def load_stats():
    stats_path = user_data_dir("statistics.json")
    try:
        with open(stats_path, "r") as stats_file:
            stats = json.load(stats_file)
            stats_file.close()
    except:
        stats_path.parent.mkdir(parents=True, exist_ok=True)
        stats_path.touch(exist_ok=True)
        stats = init_stats()
    return stats
#
# end load_stats()
#


#
# save_stats(): save statistics to statistics.json in user data directory
#   stats: dictionary containing statistics
#
def save_stats(stats):
    stats_path = user_data_dir("statistics.json")
    with open(stats_path, "w") as stats_file:
        json.dump(stats, stats_file, indent=4)
    stats_file.close()
#
# end save_stats()
#


#
# print_stats(): print statistics with bar chart
#   stats:        dictionary containing statistics
#   guess_count:  number of guesses made
#   word_guessed: true if word was guessed
#
def print_stats(stats = False, guess_count = False, word_guessed = False):
    if not stats:
        try:
            stats = load_stats()
        except:
            return
    boldunderline = ""
    columns = ""
    highlight = ""
    normal = ""
    if has_ansi():
        boldunderline = "\033[1m\033[4m"
        columns = "\033[38;5;221m"
        highlight = "\033[38;5;34m"
        normal = "\033[0m"
    print(boldunderline + "Statistics" + normal + "\n")
    print("Played:         " + str(stats["Played"]))
    print("Win %:          " + str(int(stats["Win %"])) + "%")
    print("Current Streak: " + str(stats["Current Streak"]))
    print("Max Streak:     " + str(stats["Max Streak"]))
    print("\n" + boldunderline + "Guess Distribution" + normal + "\n")
    colours = [columns] * 6
    if word_guessed:
        colours[guess_count] = highlight
    for i, guesses in enumerate(stats["Guess Distribution"]):
        print("{:1}: {:>3} ".format(i + 1, guesses), end="")
        print(colours[i], end="")
        print("â–ˆ" * round(43 * guesses / max(stats["Guess Distribution"])), end="")
        print(normal)
    print()
#
# end print_stats()
#


#
# update_stats(): update statistics with guess results
#   guess_count:  number of guesses made
#   word_guessed: true if word was guessed
#
def update_stats(guess_count, word_guessed):
    try:
        stats = load_stats()
    except:
        return
    stats["Played"] += 1
    if word_guessed:
        stats["Won"] += 1
        stats["Current Streak"] += 1
        if stats["Current Streak"] > stats["Max Streak"]:
            stats["Max Streak"] = stats["Current Streak"]
        stats["Guess Distribution"][guess_count] += 1
    else:
        stats["Current Streak"] = 0
    stats["Win %"] = stats["Won"] / stats["Played"] * 100
    save_stats(stats)
    print_stats(stats, guess_count, word_guessed)
#
# end update_stats()
#


#
# filter_word_list(): filter a word list using the supplied regular expression
#   pattern:   regular expression to filter on
#   word_list: list of words to filter
#
#   returns:
#     filtered_word_list: word_list filtered using pattern
#
def filter_word_list(pattern, word_list):
    filtered_word_list = []
    for word in word_list:
        if re.match(pattern, word):
            filtered_word_list.append(word)
    return filtered_word_list
#
# end filter_word_list()
#


#
# get_random_word(): get a random word from a word list
#   guess_count: current guess number (0 based)
#   word_list:   list of words to select from
#
#   returns:
#     guess: a guess selected from word_list
#
def get_random_word(guess_count, word_list, DEBUG = False):
    # for first two guesses maximise non-repeating consonants with up to two vowels
    if guess_count < 2:
        # filter word list to words with only up to two vowels
        if guess_count == 0:
            # filter to words containing a, e or o on first guess
            filter_pattern = "^[^aeiou]*[aeo][^aeiou]*[aeo]?[^aeiou]*$"
        else:
            filter_pattern = "^[^aeiou]*[aeiou][^aeiou]*[aeiou]?[^aeiou]*$"
        vowel_word_list = filter_word_list(filter_pattern, word_list)
        if DEBUG:
            print("DEBUG: Guessing from " + str(len(vowel_word_list)) + " words", end=" ")
            if guess_count == 0:
                print("after filtering for a, e and o")
            else:
                print("after filtering for vowels")
        if vowel_word_list:
            # filter word list to contain unique consonants
            if guess_count == 0:
                # use ten most common consonants for first guess
                filter_pattern = r"^(?![aeosrltndcphy]*([aeosrltndcphy])[aeosrltndcphy]*\1)[aeosrltndcphy]+$"
            else:
                filter_pattern = r"^(?!.*(.).*\1)[a-z]+$"
            consonant_word_list = filter_word_list(filter_pattern, vowel_word_list)
            if DEBUG:
                print("DEBUG: Guessing from " + str(len(consonant_word_list)) + " words", end=" ")
                if guess_count == 0:
                    print("after filtering for unique common consonants")
                else:
                    print("after filtering for unique consonants")
            if consonant_word_list:
                return random.choice(consonant_word_list).strip()
            else:
                return random.choice(vowel_word_list).strip()
    return random.choice(word_list).strip()
#
# end get_random_word()
#


#
# show_guess_feedback(): Show guess feedback
#   guess_feedback = string indicating feedback
#
def show_guess_feedback(guess, guess_feedback):
    bold = ""
    yellow = ""
    green = ""
    grey = ""
    normal = ""
    if has_ansi():
        bold = "\033[1m"
        yellow = "\033[38;5;221m"
        green = "\033[38;5;34m"
        grey = "\033[38;5;244m"
        normal = "\033[0m"
    print(bold, end = "")
    for i, char in enumerate(guess):
        if guess_feedback[i] == "x":
            print(grey, end = "")
        elif guess_feedback[i] == "y":
            print(yellow, end = "")
        else:
            print(green, end = "")
        print(char, end = "")
    print(normal)
#
# end show_guess_feedback()
#


#
# get_guess_feedback(): Get guess feedback from user or supplied answer
#   guess:  word guessed
#   answer: optional supplied answer
#
#   returns:
#     guess_feedback: a string of 5 characters containing the guess feedback
#
def get_guess_feedback(guess, answer = False):
    guess_feedback = ""
    if answer:
        for i, char in enumerate(guess):
            if answer[i] == char:
                # char appears at this position in answer
                guess_feedback += "g"
            elif answer.find(char) == -1:
                # char does not appear at all in answer
                guess_feedback += "x"
            else:
                # deal with "y" possibility
                char_answer_total = answer.count(char)
                char_guessed_before = guess[:i].count(char)
                char_guessed_correct_after = 0
                for char_pos in [m.start() for m in re.finditer(char, guess[i + 1:])]:
                    if guess[i + 1 + char_pos] == answer[i + 1 + char_pos]:
                        char_guessed_correct_after += 1
                if char_guessed_correct_after + char_guessed_before >= char_answer_total:
                    guess_feedback += "x"
                else:
                    guess_feedback += "y"
        show_guess_feedback(guess, guess_feedback)
    else:
        guess_feedback = input("  Guess feedback: ")
    return guess_feedback
#
# end get_guess_feedback()
#


#
# guess_word(): guess a word and filter the word list based on feedback
#   guess_count: current guess number (0 based)
#   word_list:   list of words to select from and filter
#   DEBUG:       print debugging information
#   debug_words: seed guesses with up to 6 words
#
#   returns:
#     word_list:      Filtered word list after feedback given
#     guess_feedback: The feedback given for this guess
#     word_guessed:   True if feedback is given as "ggggg"
#
def guess_word(guess_count, word_list, answer = False, DEBUG = False, debug_words = []):
    if DEBUG:
        if guess_count == 0:
            print("DEBUG: Words in initial list: " + str(len(word_list)))

    # guess a random word from the current list
    guess = get_random_word(guess_count, word_list, DEBUG)

    # seed guesses (useful for debugging)
    if len(debug_words) > guess_count:
        if debug_words[guess_count] != "":
            if len(debug_words[guess_count]) != 5:
                if DEBUG:
                    print("DEBUG: Seeded guess '" + debug_words[guess_count] +
                            "' is not a five letter word; ignoring\n")
            else:
                if DEBUG:
                    print("DEBUG: Using seeded guess '" + debug_words[guess_count] + "'")
                guess = debug_words[guess_count]
    if DEBUG:
        print("")

    # get guess feedback
    if answer:
        print("Guess {0}: ".format(guess_count + 1), end = "")
    else:
        print("Guess {0}: {1}".format(guess_count + 1, guess))
    guess_feedback = get_guess_feedback(guess, answer)

    # ensure valid guess feedback
    while not re.match("^[gxy]{5}$", guess_feedback):
        print("    Invalid feedback format. Try again.")
        guess_feedback = input("  Guess feedback: ")

    # return for a successful guess
    if guess_feedback == "ggggg":
        global word_guessed
        return [guess], guess_feedback, True


    # filter out words containing letters which are not present at each position
    # char with feedback = "x" can not appear in any position unless there is a "y" elsewhere
    letters_not_present = [""] * 5
    for i, feedback in enumerate(guess_feedback):
        if feedback == "x":
            # check for same char with "y" feedback earlier in guess
            y_feedback = False
            for char_pos in [m.start() for m in re.finditer(guess[i], guess)]:
                if char_pos != i:
                    # if same char with "y" feedback found elsewhere then just remove
                    # it from current position
                    # set y_feedback = True as the char will still appear somewhere
                    if guess_feedback[char_pos] == "y":
                        # only need to add char once
                        if letters_not_present[i].find(guess[i]) == -1:
                            letters_not_present[i] += guess[i]
                        y_feedback = True
            # if no same char with "y" feedback elsewhere in guess
            # then can assume char is not present anywhere
            if not y_feedback:
                for j in range(5):
                    # only need to add char once
                    if letters_not_present[j].find(guess[i]) == -1:
                        letters_not_present[j] += guess[i]

    # char with feedback = "y" can't appear at that position
    for i, feedback in enumerate(guess_feedback):
        if feedback == 'y':
            # only need to add char once
            if letters_not_present[i].find(guess[i]) == -1:
                letters_not_present[i] += guess[i]

    # invert characters to test for a positive match
    for i in range(5):
        letters_not_present[i] = "[^" + letters_not_present[i] + "]"

    # char with feedback = "g" must appear at that position
    for i, feedback in enumerate(guess_feedback):
        if feedback == 'g':
            letters_not_present[i] = guess[i]

    # filter word list
    filter_pattern = "".join(letters_not_present)
    word_list = filter_word_list(filter_pattern, word_list)
    if DEBUG:
        print("\nDEBUG: Not present pattern: " + filter_pattern)
        print("DEBUG: Words left: " + str(len(word_list)))

    if (len(word_list) == 1):
        return word_list, guess_feedback, False


    # char with feedback = "y" must be present
    # at least as many times as "y" and "g" is present in the feedback
    filter_pattern = ""
    for i, feedback in enumerate(guess_feedback):
        if feedback == "y":
            if filter_pattern.find(guess[i]) == -1:
                filter_pattern += "(?=.*" + guess[i] + ".*)"
            else:
                filter_pattern = filter_pattern.replace(guess[i], guess[i] + ".*" + guess[i], 1)
    for i, feedback in enumerate(guess_feedback):
        if feedback == "g" and filter_pattern.find(guess[i]) != -1:
            filter_pattern = filter_pattern.replace(guess[i], guess[i] + ".*" + guess[i], 1)

    # filter word list
    if filter_pattern != "":
        word_list = filter_word_list(filter_pattern, word_list)
        if DEBUG:
            print("DEBUG: Must be present pattern: " + filter_pattern)
            print("DEBUG: Words left: " + str(len(word_list)))

    if (len(word_list) == 1):
        return word_list, guess_feedback, False

    # char with feedback = "y" and feedback = "x" must be present
    # exactly as many times as "y" is present in the feedback
    char_counts = {}
    # create dictionary counting "y" and "x" feedback for each letter in guess
    for i, feedback in enumerate(guess_feedback):
        char_counts[guess[i]] = list(map(operator.add, char_counts.get(guess[i], [0, 0]),
                [ int(feedback == "y"), int(feedback == "x") ]))
    for i, char in enumerate(char_counts):
        # if letter in guess has both "y" and "x" construct pattern to match words
        # containing char the number of times "y" appears in the guess
        if char_counts[char][0] > 0 and char_counts[char][1] > 0:
            filter_pattern = "^[^" + char + "]*"
            for j in range(char_counts[char][0]):
                if j > 0:
                    filter_pattern += ".*?"
                filter_pattern += "[" + char + "]"
            filter_pattern += "[^" + char + "]*$"
            word_list = filter_word_list(filter_pattern, word_list)
            if DEBUG:
                print("DEBUG: Exactly present pattern: " + filter_pattern)
                print("DEBUG: Words left: " + str(len(word_list)))

    return word_list, guess_feedback, False
#
# end guess_word()
#


#
# load_word_list(): Load word list to guess from
#   word_fname: path to file to load words from
#
# returns:
#   word_list: array of words to guess from
#   False:     could not load word list
#
def load_word_list(word_fname = "/usr/share/dict/words"):
    try:
        with open(word_fname, "r") as word_file:
            # read in 5 letter lowercase words from supplied word file (excluding Roman numbers)
            word_list = []
            for word in word_file:
                if re.match("^(?![xvicm]{5})[a-z]{5}$", word):
                    word_list.append(word)
            word_file.close()

            if len(word_list) == 0:
                print("\nERROR: File '" + word_fname + "' contains no valid 5 letter words.\n")
                return False

            return word_list
    except:
        print("\nERROR: Could not open file '" + word_fname + "' containing known words.\n")
        return False
#
# end load_word_list()
#


# 
# solve_wordle(): solve a Wordle puzzle
#   DEBUG:       print debugging information
#   practice:    whether to update statistics or not
#   number:      current Wordle number being solved
#   answer:      answer to auto-solve for
#   debug_words: seed guesses with up to 6 words
#   word_fname:  file containing words to guess from
#
# returns:
#   0: solved Wordle
#   1: could not find a solution
#
def solve_wordle(DEBUG = False, practice = False, number = -1, answer = False, debug_words = [],
        word_fname = "/usr/share/dict/words"):

    word_list = load_word_list(word_fname)
    if not word_list:
        return 1

    banner = [ "Genius", "Magnificent", "Impressive", "Splendid", "Great", "Phew" ]
    guess_history = ""

    print()
    if answer:
        if len(answer) != 5:
            print("ERROR: supplied answer must be a five letter word.\n")
            return 1
    else:
        print("For guess feedback, enter 5 characters:")
        print("    x: letter does not appear in word")
        print("    y: letter appears in the word but at a different location")
        print("    g: letter appears in the word at this location\n")

    for guess_count in range(6):
        word_list, guess_feedback, word_guessed = guess_word(guess_count, word_list, answer, DEBUG, debug_words)

        # store guess history using emojis
        for feedback in guess_feedback[ : : 1 ]:
            if feedback == 'g':
                guess_history += "\U0001F7E9" # green square
            elif feedback == 'y':
                guess_history += "\U0001F7E8" # yellow square
            else:
                guess_history += "\U00002B1C" # white square
        guess_history += "\n"

        # word guessed
        if word_guessed:
            print("\nGuessed word in {0} guesses: {1} ({2}!)\n".format(guess_count + 1,
                word_list[0], banner[guess_count]))
            if number >= 0:
                print("Wordle {0} {1}/6*\n".format(number, guess_count + 1))
            else:
                print("Wordle {0}/6*\n".format(guess_count + 1))
            print(guess_history)
            if not practice:
                update_stats(guess_count, word_guessed)
            return 0
        
        # run out of words to choose from
        if len(word_list) == 0:
            print("\nSorry, I don't know any more potential words.\n")
            if number >= 0:
                print("Wordle {0} X/6*\n".format(number))
            else:
                print("Wordle X/6*\n")
            print(guess_history)
            if not practice:
                update_stats(guess_count, word_guessed)
            return 1

    # run out of guesses
    print("\nCould not guess word within 6 guesses.\n")
    if number >= 0:
        print("Wordle {0} X/6*\n".format(number))
    else:
        print("Wordle X/6*\n")
    print(guess_history)
    if not practice:
        update_stats(guess_count, word_guessed)
    return 1
#
# end solve_wordle()
#


#
# cache_wordle_list(): Cache downloaded Wordle words to user data directory
#   worldle_hash: Wordle hash to cache
#   worldle_list: Wordle list to cache
#
def cache_wordle_list(wordle_hash, wordle_list):
    wordle_data = {
            "hash": wordle_hash,
            "date": date.today().isoformat(),
            "words": wordle_list
            }
    try:
        wordle_data_path = user_data_dir("wordle_data.json")
        wordle_data_path.parent.mkdir(parents=True, exist_ok=True)
        wordle_data_path.touch(exist_ok=True)
        with open(wordle_data_path, "w") as wordle_data_file:
            json.dump(wordle_data, wordle_data_file, indent=4)
            wordle_data_file.close()
    except:
        print("\nWARNING: Could not cache Wordle list\n")
#
# end cache_wordle_list()
#


#
# download_wordle_list(): Download Wordle words from New York Times website
#   worldle_hash: Wordle hash to download
#
#   returns:
#       wordle_list: list of Wordle words
#       False:       if an error occurs
#
def download_wordle_list(wordle_hash):
    try:
        # download Wordle list
        wordle_code_url = "https://www.nytimes.com/games/wordle/main." + wordle_hash + ".js"
        with urllib.request.urlopen(wordle_code_url) as f:
            wordle_code = f.read().decode('utf-8')
            f.close()
        wordle_var = re.search("=\[\"cigar\",.*?\]", wordle_code)
        wordle_list = wordle_var[0][3:len(wordle_var[0])-2].split("\",\"")
        # cache Wordle list locally
        cache_wordle_list(wordle_hash, wordle_list)
        return wordle_list
    except:
        print("\nERROR: Could not download Wordle list\n")
        return False
#
# end download_wordle_list()
#


#
# get_wordle_hash(): Check if a new list Wordle of Wordle words is available
#
#   returns:
#       wordle_hash: current Wordle hash
#       False:       if an error occurrs
#
def get_wordle_hash():
    try:
        wordle_url = "https://www.nytimes.com/games/wordle/index.html"
        with urllib.request.urlopen(wordle_url) as f:
            wordle_html = f.read().decode('utf-8')
            f.close()
        wordle_hash = re.search("wordle.hash = '(.*?)'", wordle_html)
        wordle_hash = wordle_hash.group(1)
        return wordle_hash
    except:
        print("\nERROR: Could not get current Wordle version\n")
        return False
#
# end get_wordle_hash()
#

#
# load_wordle_list(): Load cached Wordle words from user user data directory
#
#   returns:
#       wordle_list: list of Wordle words
#       False:       if an error occurs
#
def load_wordle_list():
    wordle_data_path = user_data_dir("wordle_data.json")

    # load cached Wordle data or download new data if no cache
    try:
        with open(wordle_data_path, "r") as wordle_data_file:
            wordle_data = json.load(wordle_data_file)
            wordle_data_file.close()
        wordle_list = wordle_data["words"]
    except:
        wordle_hash = get_wordle_hash()
        wordle_list = download_wordle_list(wordle_hash)
        return wordle_list

    # check for new Wordle data
    delta = date.today() - date.fromisoformat(wordle_data["date"])
    if delta.days > 0:
        wordle_hash = get_wordle_hash()
        if wordle_hash != wordle_data["hash"]:
            wordle_list = download_wordle_list(wordle_hash)
    return wordle_list
#
# end load_wordle_words()
#


#
# get_wordle(): Get today's or some other Wordle word
#   number: Wordle number to get (False for today's Wordle)
#
#   returns:
#       wordle: specified Wordle word
#       False:  if error occurred
#
def get_wordle(number = -1):
    # load Wordle list
    wordle_list = load_wordle_list()

    if not wordle_list:
        return False, number

    if number == -1:
        # get today's Wordle
        delta = date.today() - date.fromisoformat("2021-06-19")
        number = delta.days
        while number >= len(wordle_list):
            number -= len(wordle_list)
    elif number < 0 or number >= len(wordle_list):
        print("\nERROR: Requested Wordle must be between 0 and " + len(wordle_list) - 1 + "\n")
        return False, number

    return wordle_list[number], number
#
# end get_wordle()
#


#
# signal_handler(): signal handler to gracefully exit on Ctrl+C
#   sig:   signal number (unused)
#   frame: execution frame (unused)
#
def signal_handler(sig, frame):
    print("\n")
    sys.exit(1)
#
# end signal_handler()
#


#
# main
# exits:
#   0: success
#   1: failure
#
if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    parser = argparse.ArgumentParser(description="Solve a Wordle puzzle.")
    parser.add_argument("-a", "--answer", metavar="word", dest="answer",
            default=False, help="auto-solve using supplied five letter word")
    parser.add_argument("-d", "--debug", dest="debug", action='store_true',
            help="show debug information")
    parser.add_argument("-n", "--number", metavar="number", dest="number",
            default=-1, type=int, help="auto-solve specified Wordle")
    parser.add_argument("-p", "--practice", dest="practice", action='store_true',
            help="do not update statistics")
    parser.add_argument("-s", "--statistics", dest="stats", action='store_true',
            help="print statistics")
    parser.add_argument("-t", "--today", dest="today", action='store_true',
            help="auto-solve today's Wordle")
    parser.add_argument('-v', '--version', action='version', version='%(prog)s 1.0')
    parser.add_argument("-w", "--words", metavar="fname", dest="word_fname",
            default="/usr/share/dict/words",
            help="file containing list of words to guess from")
    parser.add_argument('guesses', metavar="guess", nargs="*",
            help="seed the solver with up to 6 guesses")
    args = parser.parse_args()
    if args.stats:
        print()
        print_stats()
        sys.exit(0)
    if args.today:
        args.answer, args.number = get_wordle()
        if not args.answer:
            sys.exit(1)
    elif args.number >= 0:
        args.answer, args.number = get_wordle(args.number)
        if not args.answer:
            sys.exit(1)
    sys.exit(solve_wordle(args.debug, args.practice, args.number, args.answer, args.guesses, args.word_fname))
#
# end main
#
